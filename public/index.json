
[{"content":"","date":"5 September 2024","externalUrl":null,"permalink":"0xm3h51n.github.io/","section":"","summary":"","title":"","type":"page"},{"content":" Artifacts: # Eternity Worm Stage 1: # Static Analysis: # This sample of Eternity Worm has an icon of an image to deceive naïve users especially if the file extension was hidden, and it\u0026rsquo;s a good trick because further down the analysis we see that after running the assumed to be an image (malware) it will run an image from its resources to hide its execution:\nThrowing the sample on\u0026quot;Detect It Easy\u0026quot; we find that it\u0026rsquo;s .NET obfuscated sample as it appear from the \u0026ldquo;.text\u0026rdquo; section:\nUnpacking The Malware: # Running the sample in \u0026ldquo;dnspy\u0026rdquo; we can see that it is heavily obfuscated and very similar to \u0026ldquo;Eternity Stealer\u0026rdquo; malware. So I used \u0026ldquo;de4dote\u0026rdquo; to deobfuscate and clean the sample :\nFrom the cleaned version image above, we can see that the loader will get its resources, and it will start by loading the encrypted image and its key, then decrypt it with a simple decryption routine and run it. Also, do the same with the worm executable and exit after executing it:\nTo Get the decrypted malware sample, we set a breakpoint after the decryption routine and then save the buffer that holds the malware with the right extension and we will get a working sample:\nOr using python we can decrypt resource files after saving it:\nEternity Worm Stage 2: # Geo-fencing: The Eternity Worm start by enumerating the languages on the machine and if it found that the machine has a Ukrainian language, it will print the message \u0026ldquo;Glory to Ukraine\u0026rdquo; and exit, otherwise it will continue execution:\nAnti-Repeating: # This feature is not a core functionality of the malware, it\u0026rsquo;s added base on the buyer\u0026rsquo;s choice. The malware will check if there was \u0026ldquo;- -debug\u0026rdquo; string in the command line argument, and if it found nothing, it will create a named object/Mutex with the name \u0026ldquo;nwwqwdpozq\u0026rdquo;. Failing to create the Mutex will cause the exit of the process, otherwise the execution will continue:\nFile Fetching \u0026amp; C2 communication: # Downloaded files: \u0026ldquo;hxxp[://]soapbeginshops[.]com/kingz[.]exe\u0026rdquo; \u0026ldquo;hxxp[://]soapbeginshops[.]com/ItsMe[.]zip\u0026rdquo; \u0026ldquo;hxxp[://]lightnogu5owjjllyo4tj2sfos6fchnmcidlgo6c7e6fz2hgryhfhoyd[.]onion[.]pet/shared/telegram[.]exe\u0026rdquo;\nWe can also capture the requests with Wireshark and Fakenet :\nSpreading Techniques: # 1 - Telegram spamming: # Download fake \u0026ldquo;telegram.exe\u0026rdquo; and starting the executable with argument \u0026ldquo;Hahahahaha, you seen this??\u0026rdquo; . The argument could be used like this \u0026ldquo;Hahahahaha, you seen this??[PAYLOAD_URL]\u0026rdquo;.\n2 - Infect Files: # Enumerate directories (Desktop - Pictures - Documents) and get list of files from it.\nFor each file it checks its extension by hash, and if it fit any of the following extensions it will be infected:\npng - exe - txt - zip - xlsx - bat - mp3 - mp4 - py - pyw - docx - jar - pdf - pptx Create a loader executable in the Temp directory which will contain:\nStub that will decrypt and execute resources files. Encrypted code of the original file. Encrypted code of \u0026ldquo;kingz.exe\u0026rdquo; and decryption key for it. Change the icon of the file to simulate original file icon. Copy original file (Created, Modified,Accessed) time and date to the fake file. Copy the fake file to original file place, and spoofs the extension using the RTLO (Right-to-Left Override) technique. This will make the file appear with original file extension while its using \u0026ldquo;scr\u0026rdquo; extension, which is a Screen saver that will execute the code. The result will be an executable similar to stage 1 loader, that will execute the original file and the \u0026ldquo;kingz.exe\u0026rdquo; executable.\n3 - Infect Drives Files: # Infect removable drives only, by infecting the files the same way mentioned previously.\n4 - Infect Python interpreter: # Infect Python OS module by adding base64 code at the beginning or the end of the file, which will download \u0026ldquo;kingz.exe\u0026rdquo; file.\n5 - Infect Cloud Directories: # Get files from directories (Dropbox - OneDrive) and infect them the same way mentioned previously.\n6 - Create discord spam # Retrieve the username with a GET request to \u0026ldquo;hxxps[://]discord[.]com/api/users/@me\u0026rdquo;, which return a JSON and then retrieving the value from the field \u0026ldquo;username#\u0026rdquo; and value of the field \u0026ldquo;discriminator\u0026rdquo;, the channels are retrieved with a request to\u0026quot;hxxps[://]discord[.]com/api/users/@me/channels\u0026quot;. Then iterates the list of IDs, and for each one, it will make a POST request to \u0026ldquo;hxxps[://]discord[.]com/api/v9/channels/{0}/messages\u0026rdquo;, using the ID and the content of the message which is: \u0026ldquo;Hahahahaha, you seen this??[PAYLOAD_URL]\u0026rdquo;.\nFeatures: # Geo-Fencing. Anti-Repeating. Obfuscation. Anti-VM. Anti-TaskManager. Anti-Debugging. Set Critical Process. Elevate Privileges. Self Destruct. extension spoofing Icon spoofing. Discord spamming. Telegram spamming. Python Interpreter Infection. User directories infection. Cloud directories infection. Removable drives infection. Yara Rule: # rule EternityWorm { meta: description = \u0026#34;Eternity Worm - file worm-loader, worm_obfuscated.exe, worm_deobfuscated, DarkBuilder.dll\u0026#34; author = \u0026#34;0xM3H51N\u0026#34; date = \u0026#34;2022-11-20\u0026#34; hash1 = \u0026#34;05995179711b59173a99521e280bded1586b35e7110aadfc68d0c95a29812fc\u0026#34; hash2 = \u0026#34;4bac627e70d01fde25794efefbb337a7008ddb0cc88ddb1cc71bbe8bd73f3\u0026#34; hash3 = \u0026#34;22d656a93589f45d7c71039fe808541105dc6927bca733933b67fa4843863f3\u0026#34; hash4 = \u0026#34;4dd7dca60e36638a0ab5362384f0009031998fd4e6e055d872049f319153300c\u0026#34; strings: $s1 = \u0026#34;DarkBuilder.dll\u0026#34; fullword wide $s2 = \u0026#34;D:\\\\Projects\\\\DarkBuilder\\\\JoinerStub\\\\obj\\\\Release\\\\JoinerStub.pdb\u0026#34; fullword ascii $s3 = \u0026#34;DarkBuilder\u0026#34; fullword wide $s4 = \u0026#34;JoinerStub.exe\u0026#34; fullword wide $s5 = \u0026#34;DarkBuilder.IconInjector\u0026#34; fullword ascii $s6 = \u0026#34;DarkBuilder_ProcessedByFody\u0026#34; fullword ascii $s7 = \u0026#34;get_spoofedExtension\u0026#34; fullword ascii $s8 = \u0026#34;ElevatePrevileges_Runtime\u0026#34; fullword ascii $s9 = \u0026#34;https://github.com/LightM4n\u0026#34; fullword wide $s10 = \u0026#34;DarkBuilder.ExtensionSpoofer\u0026#34; fullword wide $s11 = \u0026#34;Evader\u0026#34; fullword wide $s12 = \u0026#34;SignatureInjector\u0026#34; fullword wide $s13 = \u0026#34;costura.darkbuilder.dll.compressed\u0026#34; fullword ascii $s14 = \u0026#34;@LightM4n\u0026#34; condition: uint16(0) == 0x5a4d and hash.sha256(0, filesize) == \u0026#34;856ef7f6111594731015621e730d9713ae5982473280703bd3c7de5ba8884767\u0026#34; or hash.sha256(0, filesize) == \u0026#34;05995179711b59173a99521e280bded1586b35e7110aadfc68d0c95a29812fc\u0026#34; or hash.sha256(0, filesize) == \u0026#34;22d656a93589f45d7c71039fe808541105dc6927bca733933b67fa4843863f3\u0026#34; or hash.sha256(0, filesize) == \u0026#34;4dd7dca60e36638a0ab5362384f0009031998fd4e6e055d872049f319153300c\u0026#34; or any of them } ","date":"5 September 2024","externalUrl":null,"permalink":"0xm3h51n.github.io/malware-analysis/1725507515535-analyzing-eternity-worm-malware/","section":"Malware Analyses","summary":"Artifacts: # Eternity Worm Stage 1: # Static Analysis: # This sample of Eternity Worm has an icon of an image to deceive naïve users especially if the file extension was hidden, and it\u0026rsquo;s a good trick because further down the analysis we see that after running the assumed to be an image (malware) it will run an image from its resources to hide its execution:","title":"Analyzing Eternity wrom malware (Eternity Group)","type":"malware-analysis"},{"content":"","date":"5 September 2024","externalUrl":null,"permalink":"0xm3h51n.github.io/tags/eternity-malware/","section":"Tags","summary":"","title":"Eternity Malware","type":"tags"},{"content":"","date":"5 September 2024","externalUrl":null,"permalink":"0xm3h51n.github.io/malware-analysis/","section":"Malware Analyses","summary":"","title":"Malware Analyses","type":"malware-analysis"},{"content":"","date":"5 September 2024","externalUrl":null,"permalink":"0xm3h51n.github.io/tags/malware-analysis/","section":"Tags","summary":"","title":"Malware Analysis","type":"tags"},{"content":"","date":"5 September 2024","externalUrl":null,"permalink":"0xm3h51n.github.io/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"5 September 2024","externalUrl":null,"permalink":"0xm3h51n.github.io/tags/worm/","section":"Tags","summary":"","title":"Worm","type":"tags"},{"content":"","externalUrl":null,"permalink":"0xm3h51n.github.io/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"0xm3h51n.github.io/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"0xm3h51n.github.io/series/","section":"Series","summary":"","title":"Series","type":"series"}]